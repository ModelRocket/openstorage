syntax = "proto3";

package openstorage.api;

import "google/api/annotations.proto";

option go_package = "api";
option java_multiple_files = true;
option java_package = "com.openstorage";

enum FSType {
  FS_TYPE_NONE = 0;
  FS_TYPE_EXT4 = 1;
  FS_TYPE_XFS = 2;
  FS_TYPE_ZFS = 3;
  FS_TYPE_NFS = 4;
}

// TODO(pedge): originally this was 0, 5, 9, was that
// just for future spacing?
enum COS {
  COS_NONE = 0;
  COS_MEDIUM = 1;
  COS_MAX = 2;
}

// TODO(pedge): want to understand name better
message VolumeLocator {
  string name = 1;
  map<string, string> labels = 2;
}

// TODO(pedge): Source or volumeSource
message VolumeSource {
  // TODO(pedge): message Volume { string id = 1 ; } ?
  string parent_volume_id = 1;
  // TODO(pedge): typed url? more explanation needed
  string seed_uri = 2;
}

message VolumeSpec {
  bool ephemeral = 1;
  // TODO(pedge): size? size_bytes?
  uint64 size_bytes = 2;
  FSType fs_type = 3;
  // TODO(pedge): uint64? uint32? need to understand what 0 value means
  int64 block_size = 4;
  // TODO(pedge): type? enum? range? bounds?
  int32 HALevel = 5;
  // TODO(pedge): cos? volume_cos? VolumeCOS for enum name?
  COS cos = 6;
  // TODO(pege): dedupe?
  bool deduplicate = 7;
  uint32 snapshot_interval_min = 8;
  // TODO(pedge): config_labels?
  map<string, string> labels = 9;
}

message VolumeCreateRequest {
  VolumeLocator volume_locator = 1;
  VolumeSource volume_source = 2;
  VolumeSpec volume_spec = 3;
}

message VolumeCreateResponse {
  string volume_id = 1;
}

service API {
  rpc VolumeCreate(VolumeCreateRequest) returns (VolumeCreateResponse) {
    option (google.api.http) = {
      post: "/volumes"
      body: "*"
    };
  }
}
